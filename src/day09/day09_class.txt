트리(Tree)
Node 와 Branch(가지)를 이용해서, 사이클을 이루지 않도록 구성한 데이터 구조
이진트리(Binary Tree)형태의 구조로, 탐색(검색) 알고리즘 구현을 위해 많이 사용됨.

- 필수 용어
1) 노드(Node)
    트리에서 데이터를 저장하는 요소 + 데이터와 다른 연결된 노드에 대한 Branch 정보 포함
2) 루트 (Root Node) : 트리에 가장 최상위 노드(맨 위에 있는 노드)
3) 레벨 (Level) : 최상위 노드를 Level 0로 하였을 때, 하위 Branch로 연결된 노드의 깊이(Depth)
4) Parent Node(부모노드) : 어떤 노드의 다음레벨에 연결된 노드
5) Child Node(자식노드) : 어떤 노드의 상위 레벨과 연결된 노드
6) Lef Node(Terminal Node) : Child Node 가 하나도 없는 노드
7) Sibling(Brother Node) : 동일한 Parent Node를 가진 노드
8) Depth : 트리에서 Node가 가질 수 있는 최대 Level

2. 이진 트리 : 노드의 최대 Branch가 2인 트리
    이진 탐색 트리(Binary Search Tree, BST) : 이진 트리에 추가적인 조건이 달린 트리
    왼쪽 노드는 해당 노드보다 작은 값, 오른쪽 노드는 해당 노드보다 큰 값을 갖도록 구성

    데이터 탐색(검색)

3. 컬렉션 프레임워크의 대부분의 클래스들은 싱글 스레드 환경에서 사용하도록 설계되어 있음
    Vecotr, Hashtable이 동기화된 (Synchronized) 메소드로 구성되어 있어 스레드 환경에서 데이터를 안전하게 처리할 수 있다.

    List<T> synchronizedList(List<T> list) : List를 동기화된 List 리턴
    Set<T> synchronizedSet(Set<T> set)
    Map<T> synchronizedMap(Map<T> map)

    List<T> list = Collection.synchronizedList(new ArrayList<T>());

=========================================================================
Lambda Expression(람다 표현식)
람다 표현식 Java8에서 도입됨.
함수형 프로그래밍 구조에 큰 변화가 생김
단일 메서드 인터페이스(함수형 인터페이스)의 인스턴스를 보다 명확하고 간결하게 표현할 수 있는 메서드를 제공하고
컬렉션 조작을 편리하게 하고, 전반적인 코드의 가독성과 유연성을 확장시키는 장점을 가지고 있다.

1. 람다 표현식의 필요성
    함수형 인터페이스의 새로운 인스턴스를 생성하려면 일반적으로 익명 내부클래스를 사용하여 생성하였으나
    이로인해 코드가 복잡하고 번거로울때가 많았다.
    람다 표현식으로 코드의 명확성을 높이고 번잡함을 줄이는 시나리오로 채택되어 자바 8부터 지원됨

     Runnable runnable = new Runnable() {
                @Override
                public void run() {
                    System.out.println("Hello from a thread");
                }
            };


        Runnable runnable1 = () -> System.out.println("Hello from a thread");

문법)     (parameters) -> expression      (parameters) -> { // statements }
3가지 주요 컴포넌트
1. 매개변수 : 괄호로 () 로 감싸인 메서드의 입력 매개변수 이다.
2. 화살표 토큰 : -> 매개변수와 표현식 본체와 구분하는 구분자
3. 본문 : 메서드의 실제 구현 부분. 단일 표현식 또는 블럭 일 수도 있다.

Function<Integer, Integer> square = x -> x*x;
BiFunction<Integer, Integer, Integer> add = (a,b)->{return a+b; };

함수형 인터페이스
자바는 람다 표현식으로 구현할 수 있는 타입을 정의하기 위해 함수형 인터페이스 개념을 사용한다.
java.util.function 패키지는 다양한 수와 타입의 인수를 받을 수 있는 함수형 인터페이스를 포함하고 있다.

함수형인터페이스 : 하나의 추상메서드를 포함하는 인터페이스

자바의 일반적인 함수형 인터페이스
- Runnable  : 매개변수 없음. 반환 값 없음
- Callable<V> : 매개변수 없음. 타입 V의 값을 반환

1. Predicate<T> : 타입 T의 매개변수를 받고 불리언 값 반환
    Predicate<String> isEmpty = str -> str.isEmpty();

2. Function<T, R> : 타입 T의 매개변수 받고, 타입 R의 값을 반환
    Function<String, Integer> length = str -> str.length();

3. Consumer<T> : 타입 T의 매개변수를 받고 반환값 없다.
    Consumer<String> print = str -> System.out.println(str);

4. Supplier<T> : 타입 T의 매개변수를 받고 반환값은 타입 T의 값을 반환
    Supplier<String> greet = () -> "Hello Java";

5. BiFunction<T,U,R> : 매개변수가 2개를 받아 결과를 생성하는 함수
    BiFunction<Integer, Integer, Integer> multiply = (x,y) -> x*y;

    스트림 API + 람다

   List<String> names = Arrays.asList("Alics", "Bob", "John", "David");
   List<String> filterNames = names.stream().filter(name -> name.startsWith("A")).collect(Collectors.toList());

    고차 함수 지원

    public static Function<Integer,Integer> createMultiplier(int factor){
    return x -> x * factor;
    }

    Function<Integer,Integer> doubleValue =  createMultiplier(2);
    System.out.println(double.apply(5));

    new Calculable() {
    @Override
    public void calculate(int x, int y) { System.out.println(x+y)}

    (x,y) -> {System.out.println(x+y)};

    public void action(Calculable cal){
        int x = 10;
        int y =20;
        cal.calculate(x,y);
    }
    action(     // 데이터부
    (x,y) -> int result = x + y;
    System.out.println(result)
    );

    // 중요) 인터페이스의 익명 구현 객체를 람다식으로 표현하려면 인터페이스가 단 하나의 추상메소드만 가져야 한다.
    인터페이스가 단 하나의 추산 메소드를 가질 때, 함수형 인터페이스 라고 한다.

    @FunctionalInterface
    public interface Runnable{
    void run();
    }                       () -> {.....}

      @FunctionalInterface
        public interface Runnable{
        void run(int x, int y);
        }           (x,y)->{.....}


람다식
메소드 참조 : 메소드를 참조하여 매개변수의 정보와 리턴타입을 알아내겠다.
            람다식에서 불필요한 매개변수를 제거하는 것을 목적으로 한다.

            (left, right) -> Math.max(left,right);
            Math::max;

정적(static)메소드와 인스턴스메소드 참조
정적메소드 참조시  => :: 기호를 붙이고 정적메소드 이름을 기술한다.
참조메서드 참조시 => :: 참조변수::메소드

매개변수와 메소드 참조
(a,b)->{a.instanceMethod(b);}
클래스 :: instanceMethod

String의 인스턴스 메소드


***생성자 참조
생성자를 참조한다는 의미는 객체를 생성한다 와 같다.
(a,b)-> return new 클래스(a,b);
생성자 참조 표현식
클래스 :: new















